const VeriToken = require('./tokenomics/veri-token');
const VeriTokenMarketplace = require('./index');
const ZKPSystem = require('./crypto/zkp-system');
const MarketplaceWallet = require('./wallet/marketplace-wallet');
const CustomerOnboarding = require('./marketplace/customer-onboarding');
const ProductAuthenticity = require('./marketplace/product-authenticity');

/**
 * Phase 3 Demo: Advanced Features with Tokenomics
 * Demonstrates advanced ZKP, tokenomics, and comprehensive marketplace features
 */
class Phase3Demo {
  constructor() {
    this.veriToken = new VeriToken();
    this.marketplace = new VeriTokenMarketplace();
    this.zkpSystem = new ZKPSystem();
    this.customerOnboarding = new CustomerOnboarding('did:veritoken:mainnet:marketplace-authority');
    this.productAuthenticity = new ProductAuthenticity('did:veritoken:mainnet:marketplace-authority');
    this.wallets = new Map();
    this.users = new Map();
    this.products = new Map();
  }

  /**
   * Run comprehensive Phase 3 demo
   */\n  async runDemo() {\n    console.log('üöÄ VeriToken Marketplace Phase 3 Demo: Advanced Features with Tokenomics\\n');\n    console.log('=' .repeat(80));\n    \n    try {\n      // 1. Initialize systems\n      await this.initializeSystems();\n      \n      // 2. Tokenomics demo\n      await this.demoTokenomics();\n      \n      // 3. Advanced ZKP demo\n      await this.demoAdvancedZKP();\n      \n      // 4. Staking and rewards demo\n      await this.demoStakingRewards();\n      \n      // 5. Marketplace transactions with tokenomics\n      await this.demoMarketplaceWithTokenomics();\n      \n      // 6. Health metrics and analytics\n      await this.demoHealthMetrics();\n      \n      console.log('\\nüéâ Phase 3 Demo completed successfully!');\n      console.log('=' .repeat(80));\n      \n    } catch (error) {\n      console.error('‚ùå Demo failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize all systems\n   */\n  async initializeSystems() {\n    console.log('\\nüîß Initializing Systems');\n    console.log('-' .repeat(50));\n    \n    // Initialize ZKP system\n    await this.zkpSystem.initialize();\n    \n    console.log('‚úÖ All systems initialized successfully');\n    console.log('üìä Token Statistics:');\n    console.log('   Total Supply:', this.veriToken.formatTokens(this.veriToken.totalSupply), 'VERI');\n    console.log('   Founder Balance:', this.veriToken.formatTokens(this.veriToken.balanceOf('veri_founder_address')), 'VERI');\n  }\n\n  /**\n   * Demo tokenomics features\n   */\n  async demoTokenomics() {\n    console.log('\\nüí∞ Demo 1: VeriToken Tokenomics');\n    console.log('-' .repeat(50));\n    \n    // Create user addresses\n    const alice = 'alice_marketplace_user';\n    const bob = 'bob_marketplace_user';\n    const charlie = 'charlie_validator';\n    \n    // Initial token distribution\n    console.log('1. Initial token distribution...');\n    this.veriToken.mint(alice, BigInt(50000) * BigInt(10 ** this.veriToken.decimals), 'initial_distribution');\n    this.veriToken.mint(bob, BigInt(30000) * BigInt(10 ** this.veriToken.decimals), 'initial_distribution');\n    this.veriToken.mint(charlie, BigInt(20000) * BigInt(10 ** this.veriToken.decimals), 'initial_distribution');\n    \n    console.log('‚úÖ Initial distribution completed');\n    console.log('   Alice balance:', this.veriToken.formatTokens(this.veriToken.balanceOf(alice)), 'VERI');\n    console.log('   Bob balance:', this.veriToken.formatTokens(this.veriToken.balanceOf(bob)), 'VERI');\n    console.log('   Charlie balance:', this.veriToken.formatTokens(this.veriToken.balanceOf(charlie)), 'VERI');\n    \n    // Token transfers with burning\n    console.log('\\n2. Token transfers with automatic burning...');\n    this.veriToken.transfer(alice, bob, BigInt(5000) * BigInt(10 ** this.veriToken.decimals));\n    this.veriToken.transfer(bob, charlie, BigInt(2000) * BigInt(10 ** this.veriToken.decimals));\n    \n    console.log('‚úÖ Transfers completed with automatic burning');\n    \n    // Verification costs\n    console.log('\\n3. Identity verification with token costs...');\n    const verificationResult = this.veriToken.processVerification(charlie, alice, 'kyc_level_1');\n    console.log('‚úÖ Verification completed');\n    \n    // Display current statistics\n    console.log('\\nüìä Current Token Statistics:');\n    const stats = this.veriToken.getStatistics();\n    console.log('   Total Supply:', this.veriToken.formatTokens(stats.tokenInfo.totalSupply), 'VERI');\n    console.log('   Total Burned:', this.veriToken.formatTokens(stats.metrics.totalBurned), 'VERI');\n    console.log('   Total Minted:', this.veriToken.formatTokens(stats.metrics.totalMinted), 'VERI');\n    console.log('   Total Transactions:', stats.stats.totalTransactions);\n    console.log('   Total Verifications:', stats.stats.totalVerifications);\n    \n    // Store users for later demos\n    this.users.set('alice', alice);\n    this.users.set('bob', bob);\n    this.users.set('charlie', charlie);\n  }\n\n  /**\n   * Demo advanced ZKP features\n   */\n  async demoAdvancedZKP() {\n    console.log('\\nüîê Demo 2: Advanced Zero-Knowledge Proofs');\n    console.log('-' .repeat(50));\n    \n    // Age verification proof\n    console.log('1. Age verification proof...');\n    const ageProof = await this.zkpSystem.generateAgeProof('1990-05-15', 21, {\n      purpose: 'marketplace_age_verification',\n      requiredBy: 'marketplace_authority'\n    });\n    \n    const ageVerification = await this.zkpSystem.verifyProof(ageProof.proofId);\n    console.log('‚úÖ Age proof generated and verified:', ageVerification.isValid);\n    \n    // Location verification proof\n    console.log('\\n2. Location verification proof...');\n    const locationProof = await this.zkpSystem.generateLocationProof(\n      { lat: 40.7128, lng: -74.0060 }, // New York coordinates\n      { \n        name: 'United States',\n        center: { lat: 39.8283, lng: -98.5795 },\n        radius: 2000 // km\n      },\n      { purpose: 'shipping_verification' }\n    );\n    \n    const locationVerification = await this.zkpSystem.verifyProof(locationProof.proofId);\n    console.log('‚úÖ Location proof generated and verified:', locationVerification.isValid);\n    \n    // Income verification proof\n    console.log('\\n3. Income verification proof...');\n    const incomeProof = await this.zkpSystem.generateIncomeProof(\n      75000, // Annual income\n      50000, // Required minimum\n      'USD',\n      { purpose: 'premium_tier_access' }\n    );\n    \n    const incomeVerification = await this.zkpSystem.verifyProof(incomeProof.proofId);\n    console.log('‚úÖ Income proof generated and verified:', incomeVerification.isValid);\n    \n    // Membership verification proof\n    console.log('\\n4. Membership verification proof...');\n    const membershipProof = await this.zkpSystem.generateMembershipProof(\n      'member_12345',\n      'premium_group',\n      'secret_membership_key',\n      { purpose: 'exclusive_access' }\n    );\n    \n    const membershipVerification = await this.zkpSystem.verifyProof(membershipProof.proofId);\n    console.log('‚úÖ Membership proof generated and verified:', membershipVerification.isValid);\n    \n    // Show ZKP statistics\n    console.log('\\nüìä ZKP Statistics:');\n    const zkpStats = this.zkpSystem.getStatistics();\n    console.log('   Total Proofs:', zkpStats.totalProofs);\n    console.log('   Total Circuits:', zkpStats.totalCircuits);\n    console.log('   Verification Rate:', zkpStats.verificationRate + '%');\n    console.log('   Proof Types:', zkpStats.proofTypes);\n  }\n\n  /**\n   * Demo staking and rewards system\n   */\n  async demoStakingRewards() {\n    console.log('\\nüîí Demo 3: Staking and Rewards System');\n    console.log('-' .repeat(50));\n    \n    const alice = this.users.get('alice');\n    const bob = this.users.get('bob');\n    \n    // Alice stakes tokens\n    console.log('1. Alice stakes tokens...');\n    const aliceStakeAmount = BigInt(10000) * BigInt(10 ** this.veriToken.decimals);\n    const aliceStake = this.veriToken.stake(alice, aliceStakeAmount, 30 * 24 * 60 * 60 * 1000); // 30 days\n    \n    console.log('‚úÖ Alice staked:', this.veriToken.formatTokens(aliceStakeAmount), 'VERI');\n    console.log('   Stake ID:', aliceStake.id);\n    console.log('   APY:', (aliceStake.apy * 100).toFixed(2) + '%');\n    \n    // Bob stakes tokens\n    console.log('\\n2. Bob stakes tokens...');\n    const bobStakeAmount = BigInt(15000) * BigInt(10 ** this.veriToken.decimals);\n    const bobStake = this.veriToken.stake(bob, bobStakeAmount, 60 * 24 * 60 * 60 * 1000); // 60 days\n    \n    console.log('‚úÖ Bob staked:', this.veriToken.formatTokens(bobStakeAmount), 'VERI');\n    console.log('   Stake ID:', bobStake.id);\n    \n    // Show staking statistics\n    console.log('\\nüìä Staking Statistics:');\n    const stakingStats = this.veriToken.getStatistics();\n    console.log('   Total Staked:', this.veriToken.formatTokens(stakingStats.metrics.totalStaked), 'VERI');\n    console.log('   Active Stakers:', stakingStats.stats.activeStakers);\n    console.log('   Staking Ratio:', (stakingStats.metrics.stakingRatio * 100).toFixed(2) + '%');\n    \n    // Simulate daily rewards\n    console.log('\\n3. Processing daily staking rewards...');\n    this.veriToken.processDailyMaintenance();\n    \n    // Early unstaking demo (with penalty)\n    console.log('\\n4. Alice unstakes early (with penalty)...');\n    const unstakeResult = this.veriToken.unstake(aliceStake.id);\n    console.log('‚úÖ Alice unstaked:');\n    console.log('   Returned amount:', this.veriToken.formatTokens(unstakeResult.amount - unstakeResult.penaltyAmount), 'VERI');\n    console.log('   Reward amount:', this.veriToken.formatTokens(unstakeResult.rewardAmount), 'VERI');\n    console.log('   Penalty amount:', this.veriToken.formatTokens(unstakeResult.penaltyAmount), 'VERI');\n  }\n\n  /**\n   * Demo marketplace transactions with tokenomics\n   */\n  async demoMarketplaceWithTokenomics() {\n    console.log('\\nüõí Demo 4: Marketplace Transactions with Tokenomics');\n    console.log('-' .repeat(50));\n    \n    // Create marketplace entities\n    console.log('1. Creating marketplace entities...');\n    const merchant = await this.marketplace.createEntity('merchant', {\n      businessInfo: {\n        name: 'TokenTech Solutions',\n        type: 'Technology Company',\n        registrationNumber: 'TTS-2024-001'\n      }\n    });\n    \n    const customer = await this.marketplace.createEntity('customer', {\n      profile: {\n        preferredName: 'Alice Johnson',\n        kycLevel: 'level_1'\n      }\n    });\n    \n    const product = await this.marketplace.createEntity('product', {\n      productInfo: {\n        name: 'Smart Identity Device',\n        manufacturer: 'TokenTech Solutions',\n        model: 'SID-2024',\n        serialNumber: 'SID-001-2024'\n      }\n    });\n    \n    console.log('‚úÖ Entities created:');\n    console.log('   Merchant:', merchant.id);\n    console.log('   Customer:', customer.id);\n    console.log('   Product:', product.id);\n    \n    // Issue credentials with token costs\n    console.log('\\n2. Issuing credentials with token costs...');\n    \n    const merchantCredential = await this.marketplace.issueCredential(\n      merchant.id,\n      merchant.id,\n      'business_verification',\n      { businessName: 'TokenTech Solutions', verified: true }\n    );\n    \n    const customerCredential = await this.marketplace.issueCredential(\n      customer.id,\n      customer.id,\n      'kyc_level_1',\n      { kycLevel: 'level_1', verified: true }\n    );\n    \n    const productCredential = await this.marketplace.issueCredential(\n      product.id,\n      product.id,\n      'product_authenticity',\n      { authentic: true, manufacturer: 'TokenTech Solutions' }\n    );\n    \n    console.log('‚úÖ Credentials issued with token economics');\n    \n    // Create transaction\n    console.log('\\n3. Creating marketplace transaction...');\n    const transaction = await this.marketplace.createTransaction(\n      customer.id,\n      merchant.id,\n      product.id,\n      1999.99,\n      'USD'\n    );\n    \n    console.log('‚úÖ Transaction created:', transaction.id);\n    \n    // Update transaction status\n    console.log('\\n4. Completing transaction...');\n    const completedTransaction = await this.marketplace.updateTransactionStatus(\n      transaction.id,\n      'completed'\n    );\n    \n    console.log('‚úÖ Transaction completed');\n    \n    // Show final marketplace statistics\n    console.log('\\nüìä Marketplace Statistics:');\n    const marketplaceStats = this.marketplace.getStatistics();\n    console.log('   Total Entities:', marketplaceStats.totalEntities);\n    console.log('   Total Credentials:', marketplaceStats.totalCredentials);\n    console.log('   Total Transactions:', marketplaceStats.totalTransactions);\n    console.log('   Token Health Score:', marketplaceStats.tokenomics.metrics.healthScore + '/100');\n  }\n\n  /**\n   * Demo health metrics and analytics\n   */\n  async demoHealthMetrics() {\n    console.log('\\nüìà Demo 5: Health Metrics and Analytics');\n    console.log('-' .repeat(50));\n    \n    // Get comprehensive health metrics\n    const healthMetrics = this.veriToken.getHealthMetrics();\n    \n    console.log('üí∞ Token Health Metrics:');\n    console.log('   Total Supply:', this.veriToken.formatTokens(healthMetrics.totalSupply), 'VERI');\n    console.log('   Circulating Supply:', this.veriToken.formatTokens(healthMetrics.circulatingSupply), 'VERI');\n    console.log('   Total Burned:', this.veriToken.formatTokens(healthMetrics.totalBurned), 'VERI');\n    console.log('   Total Minted:', this.veriToken.formatTokens(healthMetrics.totalMinted), 'VERI');\n    console.log('   Total Staked:', this.veriToken.formatTokens(healthMetrics.totalStaked), 'VERI');\n    \n    console.log('\\nüìä Economic Health Indicators:');\n    console.log('   Burn-to-Mint Ratio:', healthMetrics.burnToMintRatio.toFixed(2));\n    console.log('   Staking Ratio:', (healthMetrics.stakingRatio * 100).toFixed(2) + '%');\n    console.log('   Health Score:', healthMetrics.healthScore + '/100');\n    console.log('   Price Stability:', healthMetrics.priceStability + '/100');\n    console.log('   Inflation Rate:', healthMetrics.inflationRate.toFixed(2) + '%');\n    \n    // ZKP system health\n    const zkpStats = this.zkpSystem.getStatistics();\n    console.log('\\nüîê ZKP System Health:');\n    console.log('   Total Proofs Generated:', zkpStats.totalProofs);\n    console.log('   Verification Success Rate:', zkpStats.verificationRate + '%');\n    console.log('   Available Circuits:', zkpStats.totalCircuits);\n    \n    // Marketplace health\n    const marketplaceStats = this.marketplace.getStatistics();\n    console.log('\\nüõí Marketplace Health:');\n    console.log('   Active Entities:', marketplaceStats.totalEntities);\n    console.log('   Credential Issuance:', marketplaceStats.totalCredentials);\n    console.log('   Transaction Volume:', marketplaceStats.totalTransactions);\n    \n    // Health recommendations\n    console.log('\\nüí° Health Recommendations:');\n    if (healthMetrics.burnToMintRatio > 2.5) {\n      console.log('   ‚ö†Ô∏è High burn rate - consider increasing utility to encourage holding');\n    } else if (healthMetrics.burnToMintRatio < 1.0) {\n      console.log('   ‚ö†Ô∏è Low burn rate - consider increasing transaction fees or burn mechanisms');\n    } else {\n      console.log('   ‚úÖ Healthy burn-to-mint ratio');\n    }\n    \n    if (healthMetrics.stakingRatio < 0.2) {\n      console.log('   ‚ö†Ô∏è Low staking participation - consider increasing rewards');\n    } else if (healthMetrics.stakingRatio > 0.6) {\n      console.log('   ‚ö†Ô∏è High staking ratio - may reduce liquidity');\n    } else {\n      console.log('   ‚úÖ Healthy staking participation');\n    }\n    \n    if (healthMetrics.healthScore < 70) {\n      console.log('   ‚ö†Ô∏è Overall health below optimal - review tokenomics parameters');\n    } else {\n      console.log('   ‚úÖ Overall system health is good');\n    }\n  }\n}\n\n/**\n * Run the demo\n */\nasync function runPhase3Demo() {\n  const demo = new Phase3Demo();\n  await demo.runDemo();\n}\n\n// Export for use as module or run directly\nmodule.exports = Phase3Demo;\n\nif (require.main === module) {\n  runPhase3Demo().catch(console.error);\n}
